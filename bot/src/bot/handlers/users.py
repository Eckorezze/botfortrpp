import asyncio

from aiogram import types
from aiogram.dispatcher import FSMContext

import config
from keyboards import keyboards as kb
from main import dp, bot, _, update_info
from messages import bot_messages as bm
from middlewares.throttling_middleware import rate_limit
from services import DataBase

db = DataBase()

admin_id = config.admin_id

@rate_limit(1)
@dp.message_handler(commands=["start"])
@dp.message_handler(text=['üìÇMenu', 'üìÇ–ú–µ–Ω—é'])
async def send_welcome(message: types.Message):
    
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–ª–∏ –≤—ã–≤–æ–¥–∏—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.

    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é "–ú–µ–Ω—é".
    –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    - message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    
    await bot.send_chat_action(message.chat.id, "typing")

    user_id = message.from_user.id
    user_name = message.from_user.full_name
    user_username = message.from_user.username

    await db.add_users(user_id, user_name, user_username)

    await message.reply(_("Hi\! I'm your bot"), reply_markup=kb.return_select_keyboard())

@rate_limit(1)
@dp.message_handler(text=["‚ÑπÔ∏èINFO", "‚ÑπÔ∏è–ò–ù–§–û"])
async def info_handler(message: types.Message):
    
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ.

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    - message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
    """
    
    await message.answer(bm.send_info(), reply_markup=kb.return_feedback_button())

@rate_limit(1)
@dp.message_handler(commands=['language'])
async def change_lang(message: types.Message):
    
    """
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.

    –ü–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /language –≤—ã–≤–æ–¥–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —è–∑—ã–∫–∞–º–∏.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    - message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π —Å–º–µ–Ω—ã —è–∑—ã–∫–∞.
    """
    
    user_id = message.from_user.id

    await bot.send_chat_action(user_id, 'typing')

    wait_message = await bot.send_message(message.chat.id, "‚è≥", reply_markup=types.ReplyKeyboardRemove())

    await asyncio.sleep(1)

    await bot.delete_message(chat_id=message.chat.id, message_id=wait_message.message_id)

    await message.answer(_("Please choose your language"), reply_markup=kb.lang_keyboard,
                         parse_mode="MarkdownV2")


@dp.callback_query_handler(lambda call: call.data.startswith('lang_'))
async def language_callback(call: types.CallbackQuery):
    
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —è–∑—ã–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    - call (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞.
    """
    
    user_id = call.from_user.id
    language = call.data.split('_')[1]

    await db.set_language(user_id, language)

    await bot.send_chat_action(user_id, 'typing')
    await call.message.edit_text(text=bm.choose_lan(language), reply_markup=None)


@dp.callback_query_handler(lambda call: call.data == 'feedback')
@rate_limit(1)
async def feedback_handler(call: types.CallbackQuery):
    
    """
    –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.

    –£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    - call (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.
    """
    
    await call.message.delete()
    await call.message.answer(_('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:'), reply_markup=kb.cancel_keyboard())
    await dp.current_state().set_state("send_feedback")
    await update_info(call.message)


@dp.message_handler(state="send_feedback")
async def feedback(message: types.Message, state: FSMContext):
    
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    - message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - state (FSMContext): –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    """
    
    feedback_message = message.text
    feedback_message_id = message.message_id
    feedback_message_chat_id = message.chat.id
    user_id = message.from_user.id
    user_username = message.from_user.username

    if feedback_message == _("‚Ü©Ô∏è–û—Ç–º–µ–Ω–∞"):
        await bot.send_message(message.chat.id,
                               _('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'),
                               reply_markup=types.ReplyKeyboardRemove())
        await state.finish()
        await info_handler(message)
        return

    if user_username is not None:
        user = "@" + user_username
    else:
        user = user_id

    await state.finish()

    await bot.send_message(chat_id=admin_id, text=bm.feedback_message_send(user, feedback_message),
                           reply_markup=kb.feedback_answer(feedback_message_id, feedback_message_chat_id),
                           parse_mode="MarkdownV2")

    await message.answer(
        _("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏e *{feedback_message_id}* –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ").format(feedback_message_id=feedback_message_id),
        reply_markup=types.ReplyKeyboardRemove())
    await update_info(message)
